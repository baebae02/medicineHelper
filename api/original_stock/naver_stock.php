<?php 

/* [문제 원인 분석 및 해결 과정]
* 말씀하신 코드를 찬찬히 읽어봤습니다!
* 저도 해봤는데 안되서 당황스럽더라구요!!!!

* 그래서 정말로 말씀하신 "Javascript 가 문제일까?" 하는 생각이 들었습니다.
* 하지만, 그건 아닌 것 같다는 생각이 들었어요.

* 왜냐하면 3가지 이유가 있었습니다!
* 1.
* 가장 명확한 이유입니다.
* "네이버 업종별 시세 - 제약" 파트를 보시면 말씀하신대로 총 152개의 종목이 뜨는 것을 알 수 있었어요.
* Chrome으로 들어갔을 때도 152개가 보이고, 아래의 크롤링 코드에도 152개가 보인다면, 일단 제대로 받아왔음을 알 수 있어요.
* 만약, Javascript 때문에 제대로 불러오지 못했다면 회사가 아예 안 뜨거나, 정보를 덜 받아오는 상황이 생길 수 있어요.
* 이게 무슨 말이냐면, 예를 들어서,
* 제약 회사의 종류가 152개 보다 적으면, 분명 빈칸이 생겨야해요. 또는 152개 보다 많다면? 내용이 누락이 되겠죠?
* 또한, 저는 확인을 위해 다른 업종(업종별시세 전체보기)에 들어가봤어요.
* 조선의 경우 훨씬 수가 적고, 지금 1등인 "건강관리기술"은 11개의 종목이 있어요.
* 즉, Javascript 때문에 보이지 않는다고 말하는 것은 잘못된 원인 분석이라고 볼 수 있어요!
* 2.
* echo "<pre>"; var_dump($html); echo "</pre>";
* 위 코드처럼 HTML을 그대로 print 해보면, 정상적으로 기업의 이름이 나온다는 사실을 알 수 있었어요.
* 3.
* Chrome의 개발자도구에서 "Disable Javascript" (개발자도구 -> Command Palette -> Disable Javascript)
* 를 이용해서 강제로 Javascript를 불러오지 못하게 해도 정상적으로 출력됨을 알 수 있었어요!
* 그렇기 때문에 Javascript가 정상적으로 출력되지 않는다는 사실은 알 수 있었죠.

* 그렇다면, 왜 문제가 생겼을까요?
* 저는 그 원인을 위의 2가지 이유를 찾은 것에서 발견한 차이점에서 시작했어요.
* 1의 방법을 이용하면 글자가 막... 마름모에 ? 들어간.. 이상한 깨진 문자열로 표시됨을 볼 수 있어요.
* 그런데 2의 방법을 이용하면, 정상적으로 글자가 출력되요!
* 이 사실은 대게는 정상적인 HTML 문서라면 일어날 수 없는 일이에요.

* 그래서 HTML 전체 문서를 Chorme 개발자 도구에서 읽어봤어요. 재밌는 부분이 있더라구요.
* body 부분이 시작할 때의 onload="getGNB();" 부분이에요.
* 즉, HTML에서 강제적으로 getGNB() 함수를 실행하게 되는데,
* 우리는 재밌게도, Javascript를 Disable 해놨기 때문에, 불러온 .js 파일은 없는 상태에요.
* (이 사실은 Chorme 개발자도구 - 상단탭의 Source 부분에서 확인할 수 있어요. 현재 보고 있는 페이지에서 사용하는 모든 소스코드는 Source 에 트리 형태로 보여주거든요.)
* 그렇다면, getGNB를 어떻게 불러올까요? 바로 HTML 내부에서 선언했다는 사실을 직감할 수 있었어요.

* 그래서 GNB라는 단어를 찾기 기능 (Ctrl + F) 을 통해서 검색해봤더니 힌트가 되는 부분을 찾을 수 있었어요.
* 해당 GNB와 관련한 javascript 문장을 선언한 부분에 new nhn.AcDataManager 부분을 보시면 euc-kr 부분을 찾을 수 있었어요.
* 그래서 저는 "이건 인코딩 문제겠다" 라는 생각을 했습니다!

* 인코딩의 의미와 해결방법은 하단에 다시 설명하겠습니다.
*/

$result = array();
$url = "https://finance.naver.com/sise/sise_group_detail.naver?type=upjong&no=261";

$html = file_get_contents($url);
// 추가된 부분
$html = mb_convert_encoding($html, 'UTF-8', mb_detect_encoding($html, 'EUC-KR', true));

/* [문제의 원인 탐구해보기]
* 왜 정상적으로 출력이 되지 않았을까요?
* 바로 Encoding 때문입니다!

* Encoding 이란, "어떻게 글자를 보일 것인가?" 하는 하나의 약속입니다.
* 우리가 잘 알고 있는 ASCII 도 역시 Encoding 방식 중의 하나인데요,
* 컴퓨터는 사실 0과 1로 이루어져 있기 때문에 우리가 메모리에 글자를 넣는다고 생각하지만
* 사실은 숫자가 들어간답니다!
* 이 사실은 C언어에서 몇 번 다루어봐서 잘 아실거라 생각해요!

* 예를 들어서,
* ASCII code 상에서 A=65 (=0x41) 입니다.
* C언어에서 int A = 65; printf("%c", A);
* 위의 명령어를 이용하면 우리는 사실 숫자를 입력했는데 C언어는 65라는 숫자를 읽고 A라는 숫자를 출력해요!
* 왜냐하면 "%c" 라는 부분에서 우리는 "이 변수에 있는 값을 character로 읽을 것이다." 하고 약속 했기 때문이에요.

* 위의 사실처럼, HTML 문서에도 여러 종류의 Encoding이 존재한답니다!
* 대표적으로 많이 사용하는 Encoding 방식인 UTF-8, 영어(유럽)권 국가에서 많이 사용하는 Latin-1 (ISO-8859-1)
* 한국에서 많이 사용하는 문자열로는 EUC-KR 등 많은 Encoding 이 존재합니다!
*/

/* [해결방법에 대하여]
* 해결방법은 간단해요! 적혀있는 인코딩을 다르게 읽어오면 됩니다!
* $html = mb_convert_encoding($html, 'UTF-8', mb_detect_encoding($html, 'EUC-KR', true));
* 위의 코드처럼 말이죠.

* 그럼 이런 의문이 들거에요.
* "인코딩 종류가 많다며? 그 중에 UTF-8 인지, Latin-1 인지, EUC-KR 인지 내가 어떻게 알아?"
* 맞아요. 저도 몰라요! 헤헤
* 한글을 표현할 수 있는 인코딩에는
* UTF-8, UTF-8 BOM, UTF-16, UTF-16 BOM, UTF-32, CP949, EUC-KR, KS X 1001, KS X 1002, KS X 1003 등 
* 엄청나게 많죠??????
* 정말 슬픈 사실은 어떤 인코딩으로 적혀있는지 알 수 없다는 사실이에요..
* 그래서 우리는 노가다로 하나하나 찾아보는 수고로움을 견뎌야해요....ㅠㅠ

* "어떤 인코딩으로 적혀있는지 어떻게 빠르게 알 수 있을까요?" 라는 질문을 몇 년전, 저는 했었어요.
* 글쎄요.. 저는 아직 답을 찾지 못했어요..
* 최대한 힌트를 찾아보는 수 밖에 없어요. HTML 같은 경우에는 보통 최상단에 적혀있어요.
* 현재 보고 있는 제약 업종 페이지는
* <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
* 이렇게, UTF-8 이라고 적혀있죠!!
* (아마, 기본적으로 HTML 불러올 때는 이걸보고 읽어오지만.. 현재는 특이한 경우 이므로 (EUC-KR 로 적혀있었음.) 생긴 특이한 상황이라 생각되요.)
* 그래서 저는 이번 문제를 해결하기 위해서,
* HTML 문서에서 인코딩과 관련한 모든 종류들을 검색해보기 시작했어요.
* 다행히 있는 내용이 UTF-8과 EUC-KR 밖에 없더라구요.
* 그래서 한번 바꿔봤더니 짜잔 잘 되더라구요ㅎㅎ

* 이쯤 위의 문단을 읽었다면, "안 적혀있으면 어떻게 알 수 있을까요?" 라는 또 재귀적인 질문을 할 수 있어요.
* 그런 경우는 보통 "어떤 파일을 열었더니 파일이 깨져있을 때" 에요.
* 왜냐하면, 우리가 보통 파일을 어떤 인코딩으로 썼는지는 어디에도 적어놓지 않기 때문이에요.
* (txt 파일을 hex editor 등으로 열어보면..... 없음을 알 수 있습니다!)
* 그러므로, 저는 어떻게 찾냐면..
* VS code를 이용해서 찾는데요,
* VS code의 우측 하단을 보시면 UTF-8 이나 CP949 같이 인코딩 이름이 적혀있을거에요.
* 해당 부분을 누르시면 Reopen with Encoding 이라는 메뉴가 뜨는데
* 해당 버튼을 눌러서 이것저것.... 눈에 잘 읽히는 인코딩이 나올 때까지 하나하나 눌러본답니다..

* 암튼 이렇게! 해결할 수 있어요!
*/

$dom = new DOMDocument("1.0", "UTF-8");
@$dom->loadHTML($html);
$finder = new DomXPath($dom);

$className = "name_area";
$query = "//div[@class='$className']/a";
$stockName = $finder->query($query);

$stockName_arr = iterator_to_array($stockName);
foreach($stockName_arr as $eachItem) {
    array_push($result, $eachItem->nodeValue);
}
echo "<pre>";
var_dump($result);
echo "</pre>";
?>